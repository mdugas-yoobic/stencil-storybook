/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { TLanguage } from "./github/4.templates/about-section/about-section";
import { FileData } from "./github/2.molecules/file-line/file-line";
import { repoData } from "./github/3.organisms/file-list/file-list";
import { TIcons } from "./github/1.atoms/icon/icon";
import { Item } from "./components/todoItem/todoItem";
import { Item as Item1 } from "./components/todoItem/todoItem";
export namespace Components {
    interface FirstComp {
        "name": string;
    }
    interface GhA {
        "align": string;
        "url": string;
    }
    interface GhAboutSection {
        "languages": TLanguage[];
    }
    interface GhButton {
        "class": string;
    }
    interface GhDropdown {
        "size": string;
    }
    interface GhDropdownButton {
        "buttonName": string;
        "dropdownAlign": string;
        "dropdownSize": string;
    }
    interface GhFileLine {
        "fileData": FileData;
        "hover": boolean;
        "rounded": boolean;
    }
    interface GhFileList {
        "repoData": repoData;
    }
    interface GhIcon {
        "color": string;
        "type": TIcons;
    }
    interface GhIconTag {
        "iconColor": string;
    }
    interface GhInput {
        "placeholder": string;
        "url": string;
    }
    interface GhNavItem {
        "class": string;
    }
    interface GhNavbar {
        "class": string;
        "items": string[];
    }
    interface GhPourcentageBar {
        "colors": string[];
        "pourcentages": number[];
    }
    interface GhSectionElement {
    }
    interface GhSectionList {
        "sectionNumber": number;
    }
    interface ItemList {
        "delay": number;
    }
    interface TodoComplete {
        "todoItems": Item[];
    }
    interface TodoItem {
        "description": string;
        "done": boolean;
        "uuid": number;
    }
    interface TodoSection {
    }
    interface XButton {
        "enable": boolean;
    }
}
export interface TodoItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoItemElement;
}
export interface TodoSectionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTodoSectionElement;
}
declare global {
    interface HTMLFirstCompElement extends Components.FirstComp, HTMLStencilElement {
    }
    var HTMLFirstCompElement: {
        prototype: HTMLFirstCompElement;
        new (): HTMLFirstCompElement;
    };
    interface HTMLGhAElement extends Components.GhA, HTMLStencilElement {
    }
    var HTMLGhAElement: {
        prototype: HTMLGhAElement;
        new (): HTMLGhAElement;
    };
    interface HTMLGhAboutSectionElement extends Components.GhAboutSection, HTMLStencilElement {
    }
    var HTMLGhAboutSectionElement: {
        prototype: HTMLGhAboutSectionElement;
        new (): HTMLGhAboutSectionElement;
    };
    interface HTMLGhButtonElement extends Components.GhButton, HTMLStencilElement {
    }
    var HTMLGhButtonElement: {
        prototype: HTMLGhButtonElement;
        new (): HTMLGhButtonElement;
    };
    interface HTMLGhDropdownElement extends Components.GhDropdown, HTMLStencilElement {
    }
    var HTMLGhDropdownElement: {
        prototype: HTMLGhDropdownElement;
        new (): HTMLGhDropdownElement;
    };
    interface HTMLGhDropdownButtonElement extends Components.GhDropdownButton, HTMLStencilElement {
    }
    var HTMLGhDropdownButtonElement: {
        prototype: HTMLGhDropdownButtonElement;
        new (): HTMLGhDropdownButtonElement;
    };
    interface HTMLGhFileLineElement extends Components.GhFileLine, HTMLStencilElement {
    }
    var HTMLGhFileLineElement: {
        prototype: HTMLGhFileLineElement;
        new (): HTMLGhFileLineElement;
    };
    interface HTMLGhFileListElement extends Components.GhFileList, HTMLStencilElement {
    }
    var HTMLGhFileListElement: {
        prototype: HTMLGhFileListElement;
        new (): HTMLGhFileListElement;
    };
    interface HTMLGhIconElement extends Components.GhIcon, HTMLStencilElement {
    }
    var HTMLGhIconElement: {
        prototype: HTMLGhIconElement;
        new (): HTMLGhIconElement;
    };
    interface HTMLGhIconTagElement extends Components.GhIconTag, HTMLStencilElement {
    }
    var HTMLGhIconTagElement: {
        prototype: HTMLGhIconTagElement;
        new (): HTMLGhIconTagElement;
    };
    interface HTMLGhInputElement extends Components.GhInput, HTMLStencilElement {
    }
    var HTMLGhInputElement: {
        prototype: HTMLGhInputElement;
        new (): HTMLGhInputElement;
    };
    interface HTMLGhNavItemElement extends Components.GhNavItem, HTMLStencilElement {
    }
    var HTMLGhNavItemElement: {
        prototype: HTMLGhNavItemElement;
        new (): HTMLGhNavItemElement;
    };
    interface HTMLGhNavbarElement extends Components.GhNavbar, HTMLStencilElement {
    }
    var HTMLGhNavbarElement: {
        prototype: HTMLGhNavbarElement;
        new (): HTMLGhNavbarElement;
    };
    interface HTMLGhPourcentageBarElement extends Components.GhPourcentageBar, HTMLStencilElement {
    }
    var HTMLGhPourcentageBarElement: {
        prototype: HTMLGhPourcentageBarElement;
        new (): HTMLGhPourcentageBarElement;
    };
    interface HTMLGhSectionElementElement extends Components.GhSectionElement, HTMLStencilElement {
    }
    var HTMLGhSectionElementElement: {
        prototype: HTMLGhSectionElementElement;
        new (): HTMLGhSectionElementElement;
    };
    interface HTMLGhSectionListElement extends Components.GhSectionList, HTMLStencilElement {
    }
    var HTMLGhSectionListElement: {
        prototype: HTMLGhSectionListElement;
        new (): HTMLGhSectionListElement;
    };
    interface HTMLItemListElement extends Components.ItemList, HTMLStencilElement {
    }
    var HTMLItemListElement: {
        prototype: HTMLItemListElement;
        new (): HTMLItemListElement;
    };
    interface HTMLTodoCompleteElement extends Components.TodoComplete, HTMLStencilElement {
    }
    var HTMLTodoCompleteElement: {
        prototype: HTMLTodoCompleteElement;
        new (): HTMLTodoCompleteElement;
    };
    interface HTMLTodoItemElement extends Components.TodoItem, HTMLStencilElement {
    }
    var HTMLTodoItemElement: {
        prototype: HTMLTodoItemElement;
        new (): HTMLTodoItemElement;
    };
    interface HTMLTodoSectionElement extends Components.TodoSection, HTMLStencilElement {
    }
    var HTMLTodoSectionElement: {
        prototype: HTMLTodoSectionElement;
        new (): HTMLTodoSectionElement;
    };
    interface HTMLXButtonElement extends Components.XButton, HTMLStencilElement {
    }
    var HTMLXButtonElement: {
        prototype: HTMLXButtonElement;
        new (): HTMLXButtonElement;
    };
    interface HTMLElementTagNameMap {
        "first-comp": HTMLFirstCompElement;
        "gh-a": HTMLGhAElement;
        "gh-about-section": HTMLGhAboutSectionElement;
        "gh-button": HTMLGhButtonElement;
        "gh-dropdown": HTMLGhDropdownElement;
        "gh-dropdown-button": HTMLGhDropdownButtonElement;
        "gh-file-line": HTMLGhFileLineElement;
        "gh-file-list": HTMLGhFileListElement;
        "gh-icon": HTMLGhIconElement;
        "gh-icon-tag": HTMLGhIconTagElement;
        "gh-input": HTMLGhInputElement;
        "gh-nav-item": HTMLGhNavItemElement;
        "gh-navbar": HTMLGhNavbarElement;
        "gh-pourcentage-bar": HTMLGhPourcentageBarElement;
        "gh-section-element": HTMLGhSectionElementElement;
        "gh-section-list": HTMLGhSectionListElement;
        "item-list": HTMLItemListElement;
        "todo-complete": HTMLTodoCompleteElement;
        "todo-item": HTMLTodoItemElement;
        "todo-section": HTMLTodoSectionElement;
        "x-button": HTMLXButtonElement;
    }
}
declare namespace LocalJSX {
    interface FirstComp {
        "name"?: string;
    }
    interface GhA {
        "align"?: string;
        "url"?: string;
    }
    interface GhAboutSection {
        "languages"?: TLanguage[];
    }
    interface GhButton {
        "class"?: string;
    }
    interface GhDropdown {
        "size"?: string;
    }
    interface GhDropdownButton {
        "buttonName": string;
        "dropdownAlign"?: string;
        "dropdownSize"?: string;
    }
    interface GhFileLine {
        "fileData": FileData;
        "hover"?: boolean;
        "rounded"?: boolean;
    }
    interface GhFileList {
        "repoData": repoData;
    }
    interface GhIcon {
        "color"?: string;
        "type"?: TIcons;
    }
    interface GhIconTag {
        "iconColor"?: string;
    }
    interface GhInput {
        "placeholder"?: string;
        "url"?: string;
    }
    interface GhNavItem {
        "class"?: string;
    }
    interface GhNavbar {
        "class"?: string;
        "items"?: string[];
    }
    interface GhPourcentageBar {
        "colors"?: string[];
        "pourcentages"?: number[];
    }
    interface GhSectionElement {
    }
    interface GhSectionList {
        "sectionNumber"?: number;
    }
    interface ItemList {
        "delay"?: number;
    }
    interface TodoComplete {
        "todoItems"?: Item[];
    }
    interface TodoItem {
        "description"?: string;
        "done"?: boolean;
        "onShouldDelete"?: (event: TodoItemCustomEvent<number>) => void;
        "onUpdatedDescription"?: (event: TodoItemCustomEvent<Item>) => void;
        "uuid": number;
    }
    interface TodoSection {
        "onClearListEvent"?: (event: TodoSectionCustomEvent<any>) => void;
    }
    interface XButton {
        "enable"?: boolean;
    }
    interface IntrinsicElements {
        "first-comp": FirstComp;
        "gh-a": GhA;
        "gh-about-section": GhAboutSection;
        "gh-button": GhButton;
        "gh-dropdown": GhDropdown;
        "gh-dropdown-button": GhDropdownButton;
        "gh-file-line": GhFileLine;
        "gh-file-list": GhFileList;
        "gh-icon": GhIcon;
        "gh-icon-tag": GhIconTag;
        "gh-input": GhInput;
        "gh-nav-item": GhNavItem;
        "gh-navbar": GhNavbar;
        "gh-pourcentage-bar": GhPourcentageBar;
        "gh-section-element": GhSectionElement;
        "gh-section-list": GhSectionList;
        "item-list": ItemList;
        "todo-complete": TodoComplete;
        "todo-item": TodoItem;
        "todo-section": TodoSection;
        "x-button": XButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "first-comp": LocalJSX.FirstComp & JSXBase.HTMLAttributes<HTMLFirstCompElement>;
            "gh-a": LocalJSX.GhA & JSXBase.HTMLAttributes<HTMLGhAElement>;
            "gh-about-section": LocalJSX.GhAboutSection & JSXBase.HTMLAttributes<HTMLGhAboutSectionElement>;
            "gh-button": LocalJSX.GhButton & JSXBase.HTMLAttributes<HTMLGhButtonElement>;
            "gh-dropdown": LocalJSX.GhDropdown & JSXBase.HTMLAttributes<HTMLGhDropdownElement>;
            "gh-dropdown-button": LocalJSX.GhDropdownButton & JSXBase.HTMLAttributes<HTMLGhDropdownButtonElement>;
            "gh-file-line": LocalJSX.GhFileLine & JSXBase.HTMLAttributes<HTMLGhFileLineElement>;
            "gh-file-list": LocalJSX.GhFileList & JSXBase.HTMLAttributes<HTMLGhFileListElement>;
            "gh-icon": LocalJSX.GhIcon & JSXBase.HTMLAttributes<HTMLGhIconElement>;
            "gh-icon-tag": LocalJSX.GhIconTag & JSXBase.HTMLAttributes<HTMLGhIconTagElement>;
            "gh-input": LocalJSX.GhInput & JSXBase.HTMLAttributes<HTMLGhInputElement>;
            "gh-nav-item": LocalJSX.GhNavItem & JSXBase.HTMLAttributes<HTMLGhNavItemElement>;
            "gh-navbar": LocalJSX.GhNavbar & JSXBase.HTMLAttributes<HTMLGhNavbarElement>;
            "gh-pourcentage-bar": LocalJSX.GhPourcentageBar & JSXBase.HTMLAttributes<HTMLGhPourcentageBarElement>;
            "gh-section-element": LocalJSX.GhSectionElement & JSXBase.HTMLAttributes<HTMLGhSectionElementElement>;
            "gh-section-list": LocalJSX.GhSectionList & JSXBase.HTMLAttributes<HTMLGhSectionListElement>;
            "item-list": LocalJSX.ItemList & JSXBase.HTMLAttributes<HTMLItemListElement>;
            "todo-complete": LocalJSX.TodoComplete & JSXBase.HTMLAttributes<HTMLTodoCompleteElement>;
            "todo-item": LocalJSX.TodoItem & JSXBase.HTMLAttributes<HTMLTodoItemElement>;
            "todo-section": LocalJSX.TodoSection & JSXBase.HTMLAttributes<HTMLTodoSectionElement>;
            "x-button": LocalJSX.XButton & JSXBase.HTMLAttributes<HTMLXButtonElement>;
        }
    }
}
